@using System.Data;
@using ZoomLa.BLL.Helper;
@using Newtonsoft.Json;
@using System;
@using System.Collections.Generic;
@using System.Data;
@using System.IO;
@using System.Linq;
@using System.Net;
@using System.Web;
@using System.Web.Mvc;
@using ZoomLa.BLL;
@using ZoomLa.BLL.Shop;
@using ZoomLa.Common;
@using ZoomLa.Components;
@using ZoomLa.Model;
@using ZoomLa.Model.Shop;
@using ZoomLa.SQLDAL;
@using ZoomLa.SQLDAL.SQL;

@model ZoomLaCMS.Areas.User.Models.OrderViewModel
@functions{
    B_User buser = new B_User();
    B_CartPro cartBll = new B_CartPro();
    B_OrderList orderBll = new B_OrderList();
    B_Order_IDC idcBll = new B_Order_IDC();
    OrderCommon orderCom = new OrderCommon();
    public PageSetting setting = new PageSetting();
    public M_UserInfo mu = null;
    public DataTable OrderDT = null;
    public DataTable OrderProDT = null;
    public DataTable StoreDT = null;
    public int OrderType = -1;
    public string Skey = "";
    //all,receive,needpay,comment
    public string Filter = "";

    public int Mid
    {
        get { if (ViewBag.Mid == null) { ViewBag.Mid = DataConverter.CLng(Request["ID"]); } return ViewBag.Mid; }
        set { ViewBag.Mid = value; }
    }
    public int PSize
    {
        get
        {
            return DataConverter.CLng(Request["psize"]);
        }
    }
    public int CPage
    {
        get { int _cpage = DataConverter.CLng(Request["cpage"]); if (_cpage < 1) { _cpage = 1; } return _cpage; }
    }

    //获取订单操作按钮,分为已下单(未付款),已下单(已付款),已完结(显示)
    public MvcHtmlString Getoperator(DataRow dr)
    {
        M_OrderList orderMod = new M_OrderList();
        string result = "";
        int orderStatus = DataConverter.CLng(dr["OrderStatus"]);
        int payStatus = DataConverter.CLng(dr["Paymentstatus"]);
        int oid = Convert.ToInt32(dr["ID"]);
        int aside = Convert.ToInt32(dr["Aside"]);
        string orderNo = dr["OrderNo"].ToString();
        //----------如果已经删除,则不执行其余的判断
        if (aside != 0)//如果已删除,则不进行其余的判断
        {
            result += "<div><a href='javascript:;' data-oid='" + oid + "' onclick='ConfirmAction(this,\"reconver\");'>还原订单</a></div>";
            result += "<div><a href='javascript:;' data-oid='" + oid + "' onclick='ConfirmAction(this,\"realdel\");'>彻底删除</a></div>";
            return MvcHtmlString.Create(result);
        }
        if (payStatus == (int)M_OrderList.PayEnum.NoPay)//未付款,显示倒计时和付款链接
        {
            bool isnormal = true;
            //订单过期判断
            if (SiteConfig.ShopConfig.OrderExpired > 0)
            {
                int seconds = GetOrderUnix(dr);
                if (seconds <= 0)
                { result += "<span class='gray9'>订单关闭</span>"; isnormal = false; }
                else
                { result += "<div class='weui-form-preview__item'><label class='weui-form-preview__label'>倒计时</label><span class='ordertime weui-form-preview__value' data-time='" + seconds + "'></span></div>"; }
            }
            //订单未完成,且为正常状态,显示付款
            if (isnormal && OrderHelper.IsCanPay(dr))
            {
                result += "<br/><a href='/Payonline/OrderPay.aspx?&OrderCode=" + orderNo + "' class='btn btn-danger btn-sm'> 前往付款</a> ";
            }
            //未付款可取消订单，已付款不能取消订单
            if (payStatus != 1)
            {
                result += "<span><a href='javascript:;' data-oid='" + oid + "' class='btn btn-warning btn-sm' onclick='ConfirmAction(this,\"del\");'><i class='fa fa-close'></i> 取消订单</a></span>";
            }
        }
        else
        {
            //---物流
            switch (Convert.ToInt32(dr["StateLogistics"]))
            {
                case 1:
                    if (Convert.ToInt32(dr["Ordertype"]) != 7 && Convert.ToInt32(dr["Ordertype"]) != 9)
                    {
                        result += "<div><a href='javascript:;' class='btn btn-primary' data-oid='" + oid + "' onclick='ConfirmAction(this,\"receive\");'>确认收货</a></div>";
                    }
                    break;
            }
            //已付款,但处理申请退款等状态
            if (orderStatus < (int)M_OrderList.StatusEnum.Normal)
            {
                //result += "<a href='AddShare?CartID=" + dr["CartID"] + "'>取消退款</a><br />";
            }
            //已付款未完结,可申请退款
            if (orderStatus >= (int)M_OrderList.StatusEnum.Normal && orderStatus < (int)M_OrderList.StatusEnum.OrderFinish)
            {
                //result += "<a href='javascript:;' onclick='ShowDrawback(" + oid + ");'>取消订单</a><br />";
            }
            //已付款已完结,可评价晒单
            if (orderStatus >= (int)M_OrderList.StatusEnum.OrderFinish)//已完结
            {
                if (!(dr["AddStatus"].ToString().Contains("comment")))
                {
                    if (Convert.ToInt32(dr["OrderType"]) == 7 && Convert.ToInt32(dr["OrderStatus"]) == 99)
                    {
                        M_Order_IDC idcMod = idcBll.SelModelByOrderNo(orderNo);
                        if (idcMod != null)
                        {
                            result += "<a href='/cart/idcren.aspx?orderno=" + orderNo + "' target='_blank' title='充值续费'>续费</a><br />";
                        }
                    }
                    result += "<a href='AddShare?OrderID=" + dr["ID"] + "' title='评价'><i class='fa fa-comments'></i></a><br />";
                    //result += "<a href='/Shop/" + dr["ProID"] + ".aspx' target='_blank' class='btn btn-primary'>立即购买</a>";
                }
            }
        }
        return MvcHtmlString.Create(result);
    }
    //还差多少分钟到期
    public int GetOrderUnix(DataRow dr)
    {
        DateTime addTime = Convert.ToDateTime(dr["AddTime"]);
        int seconds = (SiteConfig.ShopConfig.OrderExpired * 60 * 60) - (int)(DateTime.Now - addTime).TotalSeconds;
        return seconds;
    }
    public string GetRepair(DataRow dr)
    {
        //已完结状态才能返修,退款等售后,其他情况下申请订单退款
        string guess = DataConvert.CStr(dr["GuessXML"]);
        string result = "";
        int orderStatus = Convert.ToInt32(dr["OrderStatus"]);
        if (dr["AddStatus"].ToString().Contains("exchange"))
        {
            result += "<a href='javascript:;' class='gray9'>已申请换货</a>";
        }
        else if (dr["AddStatus"].ToString().Contains("repair"))
        {
            result += "<a href='javascript:;' class='gray9'>已申请返修</a>";
        }
        else if (dr["AddStatus"].ToString().Contains("drawback"))
        {
            result += "<a href='javascript:;' class='gray9'>已申请退货</a>";
        }
        else if (!string.IsNullOrEmpty(guess) && orderStatus >= (int)M_OrderList.StatusEnum.OrderFinish)
        {
            result += "<a href='ReqRepair.aspx?cid=" + dr["CartID"] + "' class='gray9'>返修/退换货</a>";
        }
        return result;
    }
    public string GetImgUrl(DataRow dr)
    {
        return function.GetImgUrl(dr["Thumbnails"]);
    }
    public string GetShopUrl(DataRow dr)
    {
        return orderCom.GetShopUrl(DataConvert.CLng(dr["StoreID"]), Convert.ToInt32(dr["ProID"]));
    }
    public string GetMessage(DataRow dr)
    {
        if (Convert.ToInt32(dr["OrderType"]) == 7)
        {
            return "<tr class='idm_tr'><td colspan='6'><p class='idcmessage'>详记：" + dr["Ordermessage"] + "</p></td></tr>";
        }
        else return "";
    }
    public string GetSnap(DataRow dr)
    {
        string result = "";
        int paystatus = Convert.ToInt32(dr["PaymentStatus"]);
        if (paystatus == (int)M_OrderList.PayEnum.HasPayed)
        {
            string dir = "/UploadFiles/SnapDir/" + mu.UserName + mu.UserID + "/" + dr["OrderNo"] + "/" + dr["ProID"] + ".mht";
            if (File.Exists(function.VToP(dir))) { result += "<a href='" + dir + "' target='_blank' title='查看快照'> [交易快照]</a>"; }
            if (Convert.ToInt32(dr["OrderType"]) == 7 && Convert.ToInt32(dr["OrderStatus"]) == 99)
            {
                string orderNo = DataConvert.CStr(dr["OrderNo"]);
                M_Order_IDC idcMod = idcBll.SelModelByOrderNo(orderNo);
                if (idcMod != null)
                {
                    result += "<span style='color:green;font-size:12px;'>(到期时间:" + idcMod.ETime.ToString("yyyy/MM/dd") + ") </span>";
                }
            }
        }
        return result;
    }
    public string GetStoreName(int storeid)
    {
        DataRow[] dr = StoreDT.Select("ID=" + storeid);
        if (dr.Length > 0) { return dr[0]["StoreName"].ToString(); }
        else { return ""; }
    }
    public DataTable GetProByOrder(string orderNo)
    {
        OrderProDT.DefaultView.RowFilter = "OrderNo='" + orderNo + "'";
        return OrderProDT.DefaultView.ToTable();
    }
    //绑定订单操作列
    public MvcHtmlString BindOrderOP(DataRow dr)
    {
        int count = OrderProDT.Select("id=" + dr["ID"]).Length;
        string html = "";
        //收货人 <td class='td_md gray9' rowspan='" + count + "'><i class='fa fa-user'> " + dr["AddUser"] + "</i></td>
        html += "<div class='weui-form-preview__item'><label class='weui-form-preview__label'>发起人</label><span class='weui-form-preview__value'>" + dr["AddUser"] + "</span></div>";

        //金额栏
        html += "<div class='weui-form-preview__item'><label class='weui-form-preview__label'>价格</label><span class='weui-form-preview__value'>" + Convert.ToDouble(dr["OrdersAmount"]).ToString("f2") + "</span></div>";
        string _paytypeHtml = OrderHelper.GetStatus(dr, OrderHelper.TypeEnum.PayType);
        if (!string.IsNullOrEmpty(_paytypeHtml)) { _paytypeHtml = _paytypeHtml + " "; }
        html += _paytypeHtml;
        html += "<div class='weui-form-preview__item'><label class='weui-form-preview__label'>支付状态</label><span class='weui-form-preview__value'>" + OrderHelper.GetStatus(dr, OrderHelper.TypeEnum.Pay) + "</span></div>";
        //订单状态
        html += "<div class='weui-form-preview__item'><label class='weui-form-preview__label'>订单状态</label><span class='weui-form-preview__value'>" + OrderHelper.GetStatus(dr, OrderHelper.TypeEnum.Order) + "</span></div>";
        int ordertype = DataConvert.CLng(dr["OrderType"]);
        if (ordertype != 7 && ordertype != 9)
        {
            //html += "<div class='weui-form-preview__item'><label class='weui-form-preview__label'>物流信息</label><span class='weui-form-preview__value'>" + OrderHelper.GetExpStatus(Convert.ToInt32(dr["StateLogistics"])) + "</span></div>";
        }
        //操作栏
        html += "<div class='weui-form-preview__item'><span class='weui-form-preview__value'><a href='/User/Order/OrderProList?OrderNo=" + dr["OrderNo"] + "'><i class='fa fa-file-text'></i> 查看详情</a></span></div>";
        //操作栏
        //html += "<span>" + Getoperator(dr) + "</span>";
        return MvcHtmlString.Create(html);
    }
}
@{
    M_UserInfo mu = new B_User().GetLogin();
    this.OrderType = DataConvert.CLng(Request.QueryString["ordertype"], -1);
    this.Skey = DataConvert.CStr(Request.QueryString["skey"]);
    this.Filter = string.IsNullOrEmpty(Request.QueryString["filter"]) ? "all" : Request.QueryString["Filter"];
    string ids = "";
    setting = orderBll.U_SelPage(CPage, PSize, mu.UserID, Filter, Skey, OrderType);
    OrderDT = setting.dt;
    foreach (DataRow dr in OrderDT.Rows) { ids += dr["ID"] + ","; }
    ids = ids.TrimEnd(',');
    OrderProDT = cartBll.U_SelForOrderList(ids);
    StoreDT = orderCom.SelStoreDT(OrderDT);

    Model.setting.cols = 5;
    Model.setting.url = "Order_Data";
    Model.setting.page_wrap_start = "<div class='clearfix'></div><div class='text-center' style='border:1px solid #ddd;padding:5px;border-top:none;'>";
    Model.setting.page_wrap_end = "</div>";
    Model.setting.Check = false;
}
@foreach (DataRow order in Model.OrderDT.Rows)
{
    DataTable prodt = Model.GetProByOrder(order["OrderNo"].ToString());
    <div class="weui-form-preview">
        <div class="weui-form-preview__hd">
            <div class="weui-form-preview__item">
                <label class="weui-form-preview__label">@Model.GetStoreName(Convert.ToInt32(order["StoreID"]))</label>
            </div>
        </div>
        <div class="weui-form-preview__bd">
            <div class='weui-form-preview__item'>
                <label class="weui-form-preview__label">订单号</label>
                <span class="weui-form-preview__value">@order["OrderNo"].ToString()</span>
            </div>
            @for (int i = 0; i < prodt.Rows.Count; i++){
                DataRow product = prodt.Rows[i];
                if(i == 0){ @BindOrderOP(product) }
            <div class="weui-form-preview__item">
                <label class="weui-form-preview__label">@product["Proname"]</label>
                <span class="weui-form-preview__value">x@(product["Pronum"])</span>
            </div>
            if(i == 0){ @Getoperator(product) }
            }
        </div>
        @MvcHtmlString.Create(Model.GetMessage(order))
    </div>
}
@Html.Partial("_page", Model.setting)
